---
import { siteConfig } from "../config";
const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const projectsJson = JSON.stringify(siteConfig.projects);
---

{hasProjects && (
  <section
    id="projects"
    class="p-8 sm:p-12 md:p-16 lg:p-24"
    data-projects={projectsJson}
  >
    <div>
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-start">
        <div class="lg:col-span-4">
          <h2 class="text-3xl sm:text-4xl md:text-5xl xl:text-7xl font-bold text-gray-900">
            Projects
          </h2>
          <div
            class="w-[75px] h-[5px] mt-2 rounded-full"
            style={`background-color: ${siteConfig.accentColor}`}
          />
        </div>

        <div class="lg:col-span-8">
          <div class="space-y-8">
            {siteConfig.projects.map((project, index) => (
              <div
                class="group relative cursor-pointer project-card block p-4 sm:p-6 md:p-8 bg-gray-50 rounded-xl sm:rounded-2xl border border-gray-200 transition-all duration-300 hover:bg-white hover:shadow-xl hover:border-gray-300 hover:-translate-y-1"
                data-index={index}
              >
                <div class="space-y-4">
                  <div class="absolute top-4 right-4 sm:top-6 sm:right-6 md:top-8 md:right-8 w-10 h-10 sm:w-11 sm:h-11 md:w-12 md:h-12 flex items-center justify-center bg-gray-900 rounded-full text-white transition-all duration-300 group-hover:bg-gray-700">
                    <svg
                      class="w-4 h-4 sm:w-4.5 sm:h-4.5 md:w-5 md:h-5 transition-transform duration-300 group-hover:translate-x-0.5 group-hover:-translate-y-0.5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M7 17L17 7M17 7H7M17 7V17"
                      />
                    </svg>
                  </div>
                  <div>
                    <span
                      class="text-sm font-mono"
                      style={`color: ${siteConfig.accentColor}`}
                    >
                      {(index + 1).toString().padStart(2, '0')}
                    </span>
                    <h3 class="text-xl sm:text-2xl font-bold text-gray-900 mt-1">
                      {project.name}
                    </h3>
                  </div>

                  {project.skills && project.skills.length > 0 && (
                    <div class="flex flex-wrap gap-1.5 sm:gap-2 pt-2">
                      {project.skills.map((skill) => (
                        <span
                          class="px-2.5 sm:px-3 py-1 sm:py-1.5 bg-gray-900 text-white rounded-md sm:rounded-lg text-xs sm:text-sm font-medium transition-all duration-300 group-hover:bg-gray-800"
                        >
                          {skill}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>

    {/* <!-- Modal Simple --> */}
    <div
      id="projectModal"
      class="fixed inset-0 bg-black bg-opacity-0 pointer-events-none opacity-0 z-50 flex items-center justify-center p-4 transition-all duration-300"
    >
      {/* Tombol Close di Body Modal - TETAP VISIBLE */}
      <button
        id="closeModal"
        class="absolute top-4 right-4 sm:top-6 sm:right-6 z-50 text-gray-500 hover:text-gray-800 text-2xl bg-white rounded-full w-10 h-10 flex items-center justify-center cursor-pointer hover:bg-gray-100 transition-all duration-200 shadow-lg border border-gray-200"
      >
        &times;
      </button>
      
      <div
        class="bg-white rounded-xl sm:rounded-2xl w-full max-w-2xl lg:max-w-4xl max-h-[90vh] overflow-y-auto mx-auto p-6 sm:p-8 relative shadow-2xl transform scale-95 transition-all duration-300"
        id="modalContent"
      >
        {/* Carousel Responsive */}
        <div id="carouselContainer" class="mb-6 relative overflow-hidden rounded-lg sm:rounded-xl bg-gray-100">
          <div id="carouselTrack" class="flex transition-transform duration-300 ease-in-out"></div>
          
          {/* Navigation Buttons */}
          <button 
            id="carouselPrev" 
            class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full w-8 h-8 flex items-center justify-center transition-all duration-200 opacity-0 pointer-events-none z-20"
          >
            ‹
          </button>
          <button 
            id="carouselNext" 
            class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full w-8 h-8 flex items-center justify-center transition-all duration-200 opacity-0 pointer-events-none z-20"
          >
            ›
          </button>
          
          {/* Dots Indicator */}
          <div id="carouselDots" class="flex justify-center space-x-2 absolute bottom-4 left-0 right-0"></div>
        </div>

        {/* Content */}
        <h2
          id="modalTitle"
          class="text-2xl sm:text-3xl font-bold mb-4"
          style={`color: ${siteConfig.accentColor}`}
        ></h2>
        
        <p id="modalDesc" class="text-gray-700 leading-relaxed mb-6 text-justify"></p>
        
        <div id="modalSkills" class="flex flex-wrap gap-2"></div>
      </div>
    </div>
  </section>
)}

<!-- Script dengan Carousel Responsive -->
<script>
  const section = document.getElementById("projects") as HTMLElement | null;
  if (!section?.dataset?.projects) {
    console.error('Projects section or data not found');
    return;
  }

  const projects = JSON.parse(section.dataset.projects);

  const modal = document.getElementById("projectModal")!;
  const modalContent = document.getElementById("modalContent")!;
  const titleEl = document.getElementById("modalTitle")!;
  const descEl = document.getElementById("modalDesc")!;
  const skillsEl = document.getElementById("modalSkills")!;
  const closeBtn = document.getElementById("closeModal")!;
  
  // Carousel elements
  const carouselContainer = document.getElementById("carouselContainer")!;
  const carouselTrack = document.getElementById("carouselTrack")!;
  const carouselPrev = document.getElementById("carouselPrev")!;
  const carouselNext = document.getElementById("carouselNext")!;
  const carouselDots = document.getElementById("carouselDots")!;

  let currentSlide = 0;
  let totalSlides = 0;

  function initCarousel(images: any[]) {
    carouselTrack.innerHTML = '';
    carouselDots.innerHTML = '';
    currentSlide = 0;

    // Jika tidak ada gambar, gunakan placeholder
    if (images.length === 0) {
      images = ['https://placehold.co/600x400?text=Confidential'];
    }
    
    totalSlides = images.length;
    
    // HAPUS fixed height classes yang sebelumnya
    carouselContainer.classList.remove('h-64', 'sm:h-80', 'md:h-96');
    
    // Set width track
    carouselTrack.style.width = `${totalSlides * 100}%`;
    
    // Create slides dengan aspect ratio yang responsive
    images.forEach((image: any, index: number) => {
      const slide = document.createElement('div');
      slide.className = 'w-full flex-shrink-0';
      slide.style.width = `${100 / totalSlides}%`;
      slide.innerHTML = `
        <div class="relative pt-[56.25%]"> <!-- 16:9 aspect ratio -->
          <img 
            src="${image}" 
            alt="Project image ${index + 1}" 
            class="absolute top-0 left-0 w-full h-full object-cover"
          />
        </div>
      `;
      carouselTrack.appendChild(slide);
    });

    // Navigation untuk multiple images
    if (images.length > 1) {
      images.forEach((_: any, index: number) => {
        const dot = document.createElement('button');
        dot.className = `w-3 h-3 rounded-full transition-all duration-200 ${
          index === currentSlide ? 'bg-gray-800' : 'bg-gray-300'
        }`;
        dot.addEventListener('click', () => goToSlide(index));
        carouselDots.appendChild(dot);
      });

      carouselPrev.classList.remove('opacity-0', 'pointer-events-none');
      carouselNext.classList.remove('opacity-0', 'pointer-events-none');
    } else {
      carouselPrev.classList.add('opacity-0', 'pointer-events-none');
      carouselNext.classList.add('opacity-0', 'pointer-events-none');
    }

    updateCarousel();
  }

  function goToSlide(index: number) {
    currentSlide = index;
    updateCarousel();
  }

  function updateCarousel() {
    const slideWidth = 100 / totalSlides;
    carouselTrack.style.transform = `translateX(-${currentSlide * slideWidth}%)`;
    
    // Update dots
    const dots = carouselDots.querySelectorAll('button');
    dots.forEach((dot, index) => {
      dot.className = `w-3 h-3 rounded-full transition-all duration-200 ${
        index === currentSlide ? 'bg-gray-800' : 'bg-gray-300'
      }`;
    });
  }

  function nextSlide() {
    if (currentSlide < totalSlides - 1) {
      currentSlide++;
      updateCarousel();
    }
  }

  function prevSlide() {
    if (currentSlide > 0) {
      currentSlide--;
      updateCarousel();
    }
  }

  // Event listeners
  carouselPrev.addEventListener('click', prevSlide);
  carouselNext.addEventListener('click', nextSlide);

  // Touch events untuk mobile
  let startX = 0;
  carouselContainer.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
  });

  carouselContainer.addEventListener('touchend', (e) => {
    const endX = e.changedTouches[0].clientX;
    const diff = startX - endX;
    
    if (Math.abs(diff) > 50) {
      if (diff > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (modal.classList.contains('opacity-100')) {
      if (e.key === 'ArrowLeft') prevSlide();
      if (e.key === 'ArrowRight') nextSlide();
    }
  });

  function openModal(project: { name: string | null; description: string | null; skills: any[]; images: never[]; }) {
    titleEl.textContent = project.name;
    descEl.textContent = project.description;
    skillsEl.innerHTML = "";
    
    if (project.skills && project.skills.length > 0) {
      project.skills.forEach((skill: string | null) => {
        const span = document.createElement("span");
        span.className = "px-3 py-1 bg-gray-900 text-white rounded-lg text-sm font-medium";
        span.textContent = skill;
        skillsEl.appendChild(span);
      });
    }

    const images = project.images || [];
    initCarousel(images);

    modal.classList.remove("pointer-events-none", "opacity-0");
    modal.classList.add("bg-opacity-60", "opacity-100");
    modalContent.classList.remove("scale-95");
    modalContent.classList.add("scale-100");
  }

  function closeModalSmooth() {
    modal.classList.add("opacity-0");
    modal.classList.remove("opacity-100", "bg-opacity-60");
    modalContent.classList.add("scale-95");
    modalContent.classList.remove("scale-100");

    setTimeout(() => {
      modal.classList.add("pointer-events-none");
    }, 300);
  }

  // Jika project-card adalah div
  document.querySelectorAll<HTMLDivElement>(".project-card").forEach((card) => {
    card.addEventListener("click", () => {
      const index = parseInt(card.dataset.index || "0");
      const project = projects[index];
      openModal(project);
    });
  });

  closeBtn.addEventListener("click", closeModalSmooth);
  modal.addEventListener("click", (e) => {
    if (e.target === modal) closeModalSmooth();
  });
</script>